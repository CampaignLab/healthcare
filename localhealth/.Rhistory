# http://researchbriefings.parliament.uk/ResearchBriefing/Summary/CBP-7979
#########################################################################################
# http://researchbriefings.parliament.uk/ResearchBriefing/Summary/CBP-7186
ge2015 <- read.csv("http://researchbriefings.files.parliament.uk/documents/CBP-7186/hocl-ge2015-results-summary.csv")
# http://researchbriefings.parliament.uk/ResearchBriefing/Summary/CBP-7979
ge2017 <- read.csv("http://researchbriefings.files.parliament.uk/documents/CBP-7979/HoC-GE2017-constituency-results.csv")
#########################################################################################
# Estimates of the Brexit vote by constituency
# Hanretty, C. (2017). Areal interpolation and the UK's referendum on EU membership.
# Journal of Elections, Public Opinion and Parties, 7289, 1745â€“7297.
#
# (The author requests citing this when you use the estimates. See also
# the blog post: http://tinyurl.com/brexitestblog)
#
# From https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/S4DLWJ
#########################################################################################
# have a look to see what's in the bundle of files
brexit.meta <- get_dataset("doi:10.7910/DVN/S4DLWJ")
brexit.meta$files
# Download the dataset
brexit.raw <- get_file("estimates_for_export.tab", "doi:10.7910/DVN/S4DLWJ")
# If you look at brexit.raw, you'll see it's a mess of raw binary data
# We have to save this as a comma separated file, which loads into R (and Excel)
writeBin(brexit.raw, "brexit.csv")
# Now load it in again
brexit = read.csv("brexit.csv")
#########################################################################################
# Have a look at the data
#########################################################################################
head(ge2015)
head(ge2017)
head(brexit)
#########################################################################################
# The end.
Comp <- data.frame(place=ge2015$constituency_name, AWin=ge2015$result, BWin=ge2017$result, AMaj=ge2015$majority, BMaj=ge2017$majority, ALab=ge2015$lab, BLab=ge2017$lab, ACon=ge2015$con, BCon=ge2017$con)
Comp$labswing <- (Comp$BLab-Comp$ALab)
Comp$conswing <- (Comp$BCon-Comp$ACon)
Comp$AElec <- (ge2015$electorate)
Comp$BElec <- (ge2017$electorate)
Comp$AVote <- (ge2015$valid_votes)
Comp$BVote <- (ge2017$valid_votes)
head(Comp)
write.csv(Comp2, file = "GE_Comparison2.csv")
Comp$votechange <- (ge2017$valid_votes - ge2015$valid_votes)
Comp$votechange_pc <- ((ge2017$valid_votes/ge2017$electorate)-(ge2015$valid_votes/ge2015$electorate))
plot(Comp$labswing,Comp$votechange_pc)
plot(Comp$conswing,Comp$votechange_pc)
Comp$ID <- (ge2015$ons_id)
?merge
Comp2 <- merge(Comp,brexit,by.x = "ID", by.y = "PCON11CD")
Comp2$labswing_pc <- (Comp2$labswing / Comp2$BElec)
Comp2$conswing_pc <- (Comp2$conswing / Comp2$BElec)
Comp2$labratio <- (Comp2$BLab / Comp2$BElec )
head(Comp2)
plot(Comp2$votechange_pc, Comp2$Remain.estimate)
plot(labswing ~ Remain.estimate, data = Comp2)
plot(BLab ~ Remain.estimate, data = Comp2)
plot(labswing_pc ~ Remain.estimate, data = Comp2)
plot(conswing_pc ~ Remain.estimate, data = Comp2)
plot(votechange_pc ~ Remain.estimate, data = Comp2)
plot(votechange_pc ~ labswing_pc, data = Comp2)
m1 <- lm(Remain.estimate ~ 1, data = Comp2)
m2 <- lm(Remain.estimate ~ BLab, data = Comp2)
m3 <- lm(Remain.estimate ~ BLab + labratio, data = Comp2)
m4 <- lm(Remain.estimate ~ BLab + labratio + labswing, data = Comp2)
m5 <- lm(Remain.estimate ~ BLab + labratio + labswing + labswing_pc, data = Comp2)
m6 <- lm(Remain.estimate ~ labswing_pc, data = Comp2)
anova(m1,m2,m5)
summary(m1)
summary(m2)
summary(m3)
summary(m4)
summary(m5)
summary(m6)
# Is the a relationship between Lab hold vs Lab gain and remain percentage
labwins <- data.frame(subset(Comp2, grepl("^Lab", BWin), drop = T))
table(Comp2$BWin)
labwins$hold <- as.numeric(labwins$BWin == "Lab hold")
m7 <- lm(Remain.estimate ~ hold, data = labwins)
summary(m7)
m8 <- lm(labswing_pc ~ hold, data = labwins)
summary(m8)
plot(Remain.estimate ~ hold, data = labwins)
plot(Remain.estimate ~ labswing_pc, data = labwins)
plot(hold ~ labswing_pc, data = labwins)
hist(labwins$Remain.estimate)
hist(subset(labwins, hold == 1)$Remain.estimate)
mean(labwins$Remain.estimate)
mean(subset(labwins, hold == 1)$Remain.estimate)
mean(subset(labwins, hold != 1)$Remain.estimate)
plot(labswing_pc ~ Remain.estimate, data = Comp2)
plot(conswing_pc ~ Remain.estimate, data = Comp2)
plot(BLab ~ Remain.estimate, data = Comp2)
plot(BCon ~ Remain.estimate, data = Comp2)
plot(conswing_pc ~ Remain.estimate, data = Comp2)
plot(BCon ~ Remain.estimate, data = Comp2)
plot(votechange_pc ~ Remain.estimate, data = Comp2)
plot(votechange_pc ~ labswing_pc, data = Comp2)
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(m6, col = "red")
m6 <- lm(Remain.estimate ~ labswing_pc, data = Comp2)
abline(m6, col = "red")
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(m6, col = "red")
plot(abline(m6, col = "red"))
plot(labswing_pc ~ Remain.estimate, data = Comp2)
plot(abline(m6, col = "red"))
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(m6, col = "red")
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(m6)
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(m6)
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(2)
abline(0.1,1)
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(0.1,1)
?abline
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(m6)
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(m6, col = "green")
Graphics::abline
install.packages("Graphics")
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(m6, col = "green")
Graphics::abline
abline=abline
plot(labswing_pc ~ Remain.estimate, data = Comp2)
abline(m6, col = "green")
plot(Remain.estimate ~ labswing_pc, data = Comp2)
abline(m6, col = "green")
plot(Remain.estimate ~ labswing_pc, data = Comp2)
abline(m6, col = "red")
anova(m1,m2,m5)
m10 <- lm(Remain.estimate ~ 1, data = Comp2)
m11 <- lm(Remain.estimate ~ BLab, data = Comp2)
m12 <- lm(Remain.estimate ~ BLab + labratio, data = Comp2)
m13 <- lm(Remain.estimate ~ BLab + labratio + labswing, data = Comp2)
m14 <- lm(Remain.estimate ~ BLab + labratio + labswing + labswing_pc, data = Comp2)
m15 <- lm(Remain.estimate ~ labswing_pc, data = Comp2)
m10 <- lm(Remain.estimate ~ 1, data = labwins)
m11 <- lm(Remain.estimate ~ BLab, data = labwins)
m12 <- lm(Remain.estimate ~ BLab + labratio, data = labwins)
m13 <- lm(Remain.estimate ~ BLab + labratio + labswing, data = labwins)
m14 <- lm(Remain.estimate ~ BLab + labratio + labswing + labswing_pc, data = labwins)
m15 <- lm(Remain.estimate ~ labswing_pc, data = labwins)
plot(Remain.estimate ~ labswing_pc, data = labwins)
abline(m15, col = "red")
install.packages("lme4")
load(lme4)
library(lme4)
head(sleepstudy)
lmm <- lmer(Reaction ~ Days + (Days|Subject), data = sleepstudy )
summary(lmm)
obresids <- residuals(lmm)
obresids <- residuals(lmm)
hist(obresids)
shapiro.test(obresids)
ranef(lmm)
ranefin <- ranef(lmm)$`(Intercept)`
hist(ranefin)
ranefin <- ranef(lmm)$Subject$`(Intercept)`
hist(ranefin)
shapiro.test(ranefin)
plot(predict(lmm) ~ obresids)
lmm2 <- lmer(Reaction ~ Days + (1|Subject), data = sleepstudy )
obresids2 <- residuals(lmm2)
plot(predict(lmm2) ~ obresids2)
install.packages("influence.ME")
library(influence.ME)
debugSource('~/Week10.R', echo=TRUE)
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
cooks.distance(lmm)
cooks.distance(lmm)
library(influence.ME)
cooks.distance(lmm)
lmm.inf <- influence(lmm,"Subject")
lmm.cd <- cooks.distance(lmm.inf)
View(sleepstudy)
sleepstudy$cd <- lmm.cd
View(lmm.cd)
invalid <- subset(lmm.cd, V1 >=(4/180))
invalid <- subset(lmm.cd, lmm.cd$V1 >=(4/180))
head(lmm.cd)
invalid <- subset(lmm.cd, [,1] >=(4/180))
lmm.dfbs <- dfbetas(lmm.inf)
View(lmm.dfbs)
2/sqrt(18)
lm <- lm(Reaction ~ Days, data = sleepstudy)
summary(lm)
residslm <- residuals(lm)
sd(residslm)
sd(residslm)
sd(resids)
sd(residslm)
sd(obresids)
set.seed(31337) # so you get the same "random" numbers as me
N        <- 40
x        <- c(rep(1, N/2), rep(0, N/2))
y        <- 5 + 2 * x + rnorm(N,0,1)
grp      <- factor(x, labels = c("Control", "Intervention"))
dat.mean <- data.frame(grp, y)
rm(N,x,y,grp)   # this line removes variables we don't need now
dat.mean
boxplot(y ~ grp, data = dat.mean, ylim = c(0, max(dat.mean$4))
boxplot(y ~ grp, data = dat.mean, ylim = c(0, max(dat.mean$4)))
boxplot(y ~ grp, data = dat.mean, ylim = c(0, max(dat.mean$4)))
boxplot(y ~ grp, data = dat.mean, ylim = c(0, max(dat.mean$y)))
t.test(y ~ grp, data = dat.mean, var.equal = TRUE)
t.test(y ~ grp, data = dat.mean, var.equal = TRUE)
lm1 <- lm(y ~ grp, data = dat.mean)
summary(lm1)
plot(grp, y, data( = dat.mean))
plot(grp, y, data = dat.mean)
plot(predict(lm1), y, data = dat.mean)
plot(predict(lm1) ~ y, data = dat.mean)
plot(y~predict(lm1), data = dat.mean)
plot(y~predict(lm1), data = dat.mean)
abline(predict(lm1))
coef(lm1)
sigma(lm1)
smd = (summary(lm1)$coefficients[1] / sigma(lm1))
smd
smd = (summary(lm1)$coefficients[2] / sigma(lm1))
smd
1.79455/1.051243
set.seed(42) # again, so you get the same "random" numbers as me
N        <- 100
rsquared <- .4
x        <- rnorm(N, 0, sqrt(rsquared))
y        <- x + rnorm(N, 0, sqrt(1-rsquared))
dat.cor <- data.frame(x,y)
rm(N,rsquared,x,y)
plot(y~x, data = dat.cor)
plot(y~x, data = dat.cor)
debugSource('~/Week12.R', echo=TRUE)
debugSource('~/Week12.R', echo=TRUE)
debugSource('~/Week12.R', echo=TRUE)
debugSource('~/Week12.R', echo=TRUE)
cor.test(~ x + y, data = dat.cor)
dat.cor$x.scale <- with(dat.cor, (x - mean(x))/sd(x))
dat.cor$y.scale <- with(dat.cor, (y - mean(y))/sd(y))
lm2 <- (y ~ x, data = dat.cor)
summary(lm2)
lm2 <- (y.scale ~ x.scale, data = dat.cor)
summary(lm2)
lm2 <- (y.scale ~ x.scale, data = dat.cor)
summary(lm2)
set.seed(42) # again, so you get the same "random" numbers as me
N        <- 100
rsquared <- .4
x        <- rnorm(N, 0, sqrt(rsquared))
y        <- x + rnorm(N, 0, sqrt(1-rsquared))
dat.cor <- data.frame(x,y)
rm(N,rsquared,x,y)
set.seed(42) # again, so you get the same "random" numbers as me
N        <- 100
rsquared <- .4
x        <- rnorm(N, 0, sqrt(rsquared))
y        <- x + rnorm(N, 0, sqrt(1-rsquared))
dat.cor <- data.frame(x,y)
rm(N,rsquared,x,y)
dat.cor$x.scale <- with(dat.cor, (x - mean(x))/sd(x))
dat.cor$y.scale <- with(dat.cor, (y - mean(y))/sd(y))
lm2 <- (y.scale ~ x.scale, data = dat.cor)
summary(lm2)
lm2 <- (y.scale ~ x.scale, data = dat.cor)
dat.cor$x.scale <- with(dat.cor, (x - mean(x))/sd(x))
dat.cor$y.scale <- with(dat.cor, (y - mean(y))/sd(y))
lm2 <- (y.scale ~ x.scale, data = dat.cor)
lm1 <- lm(y ~ grp, data = dat.mean)
summary(lm1)
lm2 <- (y.scale ~ x.scale, data = dat.cor)
summary(lm2)
dat.cor$xscale <- with(dat.cor, (x - mean(x))/sd(x))
dat.cor$yscale <- with(dat.cor, (y - mean(y))/sd(y))
lm2 <- (yscale ~ xscale, data = dat.cor)
summary(lm2)
dat.cor$xscale <- with(dat.cor, (x - mean(x))/sd(x))
dat.cor$yscale <- with(dat.cor, (y - mean(y))/sd(y))
lm2 <- (yscale ~ xscale, data = dat.cor)
lm2 <- lm(yscale ~ xscale, data = dat.cor)
summary(lm2)
cor.test(~ x + y, data = dat.cor)
summary(lm2)
pwr.t.test(d = 0.5, sig.level = 0.05, power = .8)
install.packages("pwr")
library(pwr)
pwr.t.test(d = 0.5, sig.level = 0.05, power = .8)
pwr.t.test(d = 0.8, sig.level = 0.05, power = .8)
pwr.t.test(d = 0.1, sig.level = 0.05, power = .8)
pwr.t.test(d = 0.9, sig.level = 0.05, power = .8)
pwr.t.test(d = 0.95, sig.level = 0.05, power = .8)
?pwr.t.test
pwr.t.test(n=5, sig.level = 0.05, power = .8)
debugSource('~/Week12.R', echo=TRUE)
pwr.t.test( r=0.5, sig.level = 0.05, power = .8)
pwr.r.test( d=0.5, sig.level = 0.05, power = .8)
?pwr.r.test
pwr.t.test( n=5, sig.level = 0.05, power = .8)
pwr.r.test( r=0.5, sig.level = 0.05, power = .8)
pwr.t.test( n=0.5, sig.level = 0.05, power = .8)
pwr.t.test( r=0.5, sig.level = 0.05, power = .8)
pwr.r.test( r=0.5, sig.level = 0.05, power = .8)
pwr.r.test( r=0.05, sig.level = 0.05, power = .8)
pwr.r.test( r=0.9, sig.level = 0.05, power = .8)
library(car)
?Mroz
summary(Mroz)
#Probability of being in work
428/(325+428)
#= 0.568
#as odds   p/(1-p)
0.568/(1-0.568)
#=1.315
#as Log odds    loge(p/(1-p))
log(1.314815)
#0.273696
logit(0.5683931)
#0.275298
Mroz$w <- as.numeric(Mroz$lfp =="yes")
logit1 <- glm(w ~ 1, data = Mroz, family = "binomial")
summary(logit1)
# intercept  = log odds value form above
logit2 <- glm(w ~ k5 + k618, data = Mroz, family = "binomial")
summary(logit2)
anova(logit1,logit2)
anova(logit1,logit2, test = "Chi")
exp(coef(logit2))
lmm1 <- lmer(Reaction ~ Days +(Days|Subject), data= sleepstudy)
library(lme4)
library(lmerTest)
library(influence.ME)
lmm1 <- lmer(Reaction ~ Days +(Days|Subject), data= sleepstudy)
cooks.distance(lmm1)
lmm1.inf <- influence(lmm1, group = Subject)
cooks.distance(lmm1.inf, sort = T)
lmm1.inf <- influence(lmm1, group = Subject)
lmm1.inf <- influence(lmm1, group = "Subject")
cooks.distance(lmm1.inf, sort = T)
4/18
cds <- cooks.distance(lmm1.inf, sort = T)
sleepstudy$cd <- cooks.distance(lmm1.inf, sort = T)
cds <- as.data.frame(cooks.distance(lmm1.inf, sort = T))
head(cds)
subset(cds,V1 > 0.22)
subset(cds,V1 < 0.22)
2/squareroot(18)
2/sqrt(18)
dfbs <- as.data.frame(dfbetas(lmm1))
dfbs <- as.data.frame(dfbetas(lmm1.inf))
head(dfbs)
subset(dfbs, (Intercept)>0.4714 |Days >0.4714)
subset(dfbs, "(Intercept)">0.4714 |"Days" >0.4714)
subset(dfbs, Intercept>0.4714 |Days >0.4714)
subset(dfbs, "(Intercept)">0.4714 |Days >0.4714)
subset(dfbs, "(Intercept)">0.4714 |Days >0.4714 | "(Intercept)"< -0.4714 |Days < -0.4714)
library(ggplot2)
ggplot(sleepstudy, aes(Days, Reaction, colour = Subject == "335", group = Subject)) +
geom_point() +
geom_line()
ggplot(sleepstudy, aes(Days, Reaction, colour = Subject == "308", group = Subject)) +
geom_point() +
geom_line()
lm1 <- lm(Reaction ~ Days, data=sleepstudy)
summary(lm1)
sd(residuals(lm1))
summary(lmm1)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(rstan)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
fx( 2L, 5 ) # should be 10
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" )
fx( 2L, 5 )
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '	return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
library(rstan)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" )
fx( 2L, 5 ) # should be 10
fx( 2L, 5 )
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) ,
'	return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
setwd("~/Google Drive/CampaignLab/Data")
dat <- read.csv("LocalHealth_All_indicators_Ward_data.csv")
View(dat)
dat2 <- read.csv("GE_study2.csv")
View(dat2)
dat3 <- merge(dat,dat2,by.x = "Area.Code", by.y = "ons_id")
View(dat3)
dat3 <- subset(dat2, Area.Type = "Ward")
View(dat3)
dat3 <- subset(dat1, Area.Type = "Ward")
View(dat3)
dat3 <- subset(dat1, Area.Type = "Ward")
View(dat3)
dat3 <- subset(dat, Area.Type = "Ward")
View(dat3)
dat3 <- subset(dat, Area.Type == "Ward")
View(dat3)
setwd("~/Google Drive/CampaignLab/Data/healthcare/localhealth")
dat <- read.csv("localhealth_wide.csv")
View(dat)
dat2 <- read.csv("result_by_ward_ID_trimmed")
View(dat2)
dat <- read.csv("localhealth_wide.csv")
View(dat)
dat2 <- read.csv("result_by_ward_ID_trimmed.csv")
View(dat2)
dat3 <- merge(dat, dat2, by.x = "Area.Code", by.y = "Area.ID" )
View(dat3)
write.csv(dat3,"merged_health_results.csv")
dat <- read.csv("health_data_merged_with_election_results.csv")
View(dat)
Head(dat)
install.packages("dataverse") # You only need to run this once per R install/PC
install.packages("lm.beta")
install.packages("ggplot2")
install.packages("sjPlot")
install.packages("broom")
install.packages("Hmisc")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
dat <- read.csv("health_data_merged_with_election_results.csv")
View(dat)
Head(dat)
head(dat)
lm1 <- lm(X2018_pct_Lab ~ Deaths.from.circulatory.disease..under.75.years..standardised.mortality.ratio_Persons, data = dat)
summary(lm1)
ggplot(dat, aes(y = X2018_pct_Lab, x = predict(lm1))) + geom_point()
library(ggplot2)
ggplot(dat, aes(y = X2018_pct_Lab, x = predict(lm1))) + geom_point()
ggplot(dat, aes(y = X2018_pct_Lab, x = predict(lm1)) + geom_point()
ggplot(dat, aes(y = X2018_pct_Lab, x = predict(lm1)) + geom_point()
ggplot(dat, aes(y = X2018_pct_Lab, x = predict(lm1))
ggplot(dat, aes(y = X2018_pct_Lab, x = predict(lm1))
ggplot(dat, aes(y = X2018_pct_Lab, x = predict(lm1))
plot(X2018_pct_Lab ~ predict(lm1))
plot(X2018_pct_Lab ~ predict(lm1))
plot(X2018_pct_Lab ~ predict(lm1))
plot(X2018_pct_Lab ~ predict(lm1), data = dat)
plot(X2018_pct_Lab ~ predict(lm1))
plot(dat$X2018_pct_Lab ~ predict(lm1))
head(dat)
lm1 <- lm(X2018_pct_Lab ~ Deaths.from.circulatory.disease..under.75.years..standardised.mortality.ratio_Persons, data = dat)
plot(X2018_pct_Lab ~ predict(lm1), data = dat)
plot(X2018_pct_Lab ~ predict(lm1), data = dat)
summary(lm1)
plot(X2018_pct_Lab ~ predict(lm1), data = dat)
lm1 <- lm(X2018_pct_Lab ~ Smoking.prevalence.at.age.15..regular.smokers..modelled.estimates_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Proficiency.in.English....of.people.who.cannot.speak.English.well.or.at.all_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Income.deprivation..English.Indices.of.Deprivation.2015_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Older.people.living.alone....of.people.aged.65.and.over.who.are.living.alone_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Older.People.in.Deprivation..English.Indices.of.Deprivation.2015..IDAOPI_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Older.People.in.Deprivation..English.Indices.of.Deprivation.2015..IDAOPI_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Provision.of.fifty.hours.or.more.unpaid.care.per.week_Persons + Older.People.in.Deprivation..English.Indices.of.Deprivation.2015..IDAOPI_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Percentage.of.total.population.aged.65.and.over_Persons + Deaths.from.coronary.heart.disease..under.75.years..standardised.mortality.ratio_Persons + Older.People.in.Deprivation..English.Indices.of.Deprivation.2015..IDAOPI_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Hospital.stays.for.self.harm..standardised.admission.ratio_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Deliveries.to.teenage.mothers..five.year.aggregate_Female, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Binge.drinking.adults..modelled.estimate_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Black.and.Minority.Ethnic..BME..Population_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Provision.of.fifty.hours.or.more.unpaid.care.per.week_Persons, data = dat)
summary(lm1)
head(dat)
lm1 <- lm(X2018_pct_Lab ~ Obese.adults..modelled.estimate_Persons Obese.children.Reception.Year..three.year.average_Persons, data = dat)
summary(lm1)
lm1 <- lm(X2018_pct_Lab ~ Crude.fertility.rate..live.births.per.1.000.women.aged.15.44.years..five.year.aggregate_Female, data = dat)
summary(lm1)
ggplot(dat, aes(x=Crude.fertility.rate..live.births.per.1.000.women.aged.15.44.years..five.year.aggregate_Female, y=delta_Lab)) +
geom_point() +
geom_smooth(method='lm') +
labs(x=Crude.fertility.rate..live.births.per.1.000.women.aged.15.44.years..five.year.aggregate_Female)
ggplot(dat, aes(x=Crude.fertility.rate..live.births.per.1.000.women.aged.15.44.years..five.year.aggregate_Female, y=delta_Lab)) +
geom_point() +
geom_smooth(method='lm') +
ggplot(dat, aes(x=Crude.fertility.rate..live.births.per.1.000.women.aged.15.44.years..five.year.aggregate_Female, y=delta_Lab)) +
geom_point() +
geom_smooth(method='lm') +
ggplot(dat, aes(x=Crude.fertility.rate..live.births.per.1.000.women.aged.15.44.years..five.year.aggregate_Female, y=delta_Lab)) +
geom_point() +
geom_smooth(method='lm') +
ggplot(dat, aes(x=Crude.fertility.rate..live.births.per.1.000.women.aged.15.44.years..five.year.aggregate_Female, y=delta_Lab)) +
geom_point() +
geom_smooth(method='lm') +
shiny::runApp()
